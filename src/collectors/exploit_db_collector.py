import requests
import yaml
from src.utils.logger import logger

class ExploitDBCollector:
    def __init__(self, config_path):
        self.config = self.load_config(config_path)
        self.exploit_data = []

    def load_config(self, config_path):
        with open(config_path, 'r') as file:
            return yaml.safe_load(file)

    def fetch_exploit_data(self):
        url = self.config['exploit_db_url'] + "api/v1/exploits"  # Hypothetical endpoint for demonstration
        try:
            response = requests.get(url)
            response.raise_for_status()
            self.exploit_data = response.json()
            logger.info("Exploit DB data fetched successfully.")
        except requests.exceptions.RequestException as e:
            logger.error(f"Error fetching Exploit DB data: {e}")

    def get_exploit_data(self):
        return self.exploit_data

    def send_to_logstash(self):
        logstash_url = 'http://logstash:5044'
        try:
            response = requests.post(logstash_url, json=self.exploit_data)
            logger.info(f"Exploit data sent to Logstash: {response.status_code}")
        except requests.exceptions.RequestException as e:
            logger.error(f"Error sending exploit data to Logstash: {e}")

# Example usage
if __name__ == "__main__":
    collector = ExploitDBCollector("config/collectors_config.yaml")
    collector.fetch_exploit_data()
    collector.send_to_logstash()
